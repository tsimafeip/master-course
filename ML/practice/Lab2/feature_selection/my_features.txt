import numpy as np

def get_matrix(a):
    return np.reshape(a, (28, 28))

def vertical_symmetry_feature(a):
    """Substracts right part of image from the left part and calculates mean of absolute differencies.
    More symmetrical digits will have lower value."""
    a = get_matrix(a)
    b = np.abs(a[:,:14] - a[:,14:])
    return np.mean(b)

def horizontal_symmetry_feature(a):
    """Substracts upper part of image from the lower part and calculates mean of absolute differencies.
    More symmetrical digits will have lower value."""
    a = get_matrix(a)
    b = np.abs(a[:14,:] - a[14:,:])
    return np.mean(b)

def horizontal_axis_feature(a):
    """Calculates mean of horizontal axis pixels.
    More horizontal-oriented digits will have higher value. Good for 1, 7."""
    a = get_matrix(a)
    return np.mean(a[10:18])

def left_half_horizontal_axis_feature(a):
    """Calculates mean of horizontal axis pixels.
    More horizontal-oriented digits will have higher value. Good for 1, 7."""
    a = get_matrix(a)
    return np.mean(a[10:18, :14])

def vertical_axis_feature(a):
    """Calculates mean of horizontal axis pixels.
    More vertical-oriented digits will have higher value."""
    a = get_matrix(a)
    return np.mean(a[:,8:20])

def upper_part_feature(a):
    """Calculates mean of horizontal axis pixels.
    More horizontal-oriented digits will have higher value. Good for 1, 7."""
    a = get_matrix(a)
    return np.mean(a[:14])

def lower_part_feature(a):
    """Calculates mean of lower part pixels.
    Digits with mainly lower center will have higher value. Good for 6, 2."""
    a = get_matrix(a)
    return np.mean(a[14:])

def left_part_feature(a):
    """Calculates mean of horizontal axis pixels.
    More horizontal-oriented digits will have higher value. Good for 1, 7."""
    a = get_matrix(a)
    return np.mean(a[:,:14])

def right_part_feature(a):
    """Calculates mean of right part pixels.
    Digits with mainly right filling will have higher value. Good for 6, 2."""
    a = get_matrix(a)
    return np.mean(a[:,14:])

def upper_right_triangle_feature(a):
    """Calculates mean of upper right triangle part pixels.
    Digits with upper right triangle filling will have higher value. Good for 7."""
    a = get_matrix(a)
    return np.mean(a[:14,16:])

def left_center_feature(a):
    """Calculates mean of upper right triangle part pixels.
    Digits with upper right triangle filling will have higher value. Good for 7."""
    a = get_matrix(a)
    return np.mean(a[8:20,:14])

def right_center_feature(a):
    """Calculates mean of upper right triangle part pixels.
    Digits with upper right triangle filling will have higher value. Good for 7."""
    a = get_matrix(a)
    return np.mean(a[8:20,14:])

def center_feature(a):
    """Calculates mean of upper right triangle part pixels.
    Digits with upper right triangle filling will have higher value. Good for 7."""
    a = get_matrix(a)
    return np.mean(a[10:18,10:18])

def very_upper_part_feature(a):
    """Calculates mean of horizontal axis pixels.
    More horizontal-oriented digits will have higher value. Good for 1, 7."""
    a = get_matrix(a)
    return np.mean(a[:8,:])

def very_lower_part_feature(a):
    """Calculates mean of horizontal axis pixels.
    More horizontal-oriented digits will have higher value. Good for 1, 7."""
    a = get_matrix(a)
    return np.mean(a[:,20:])

def very_left_center_part_feature(a):
    """Calculates mean of horizontal axis pixels.
    More horizontal-oriented digits will have higher value. Good for 1, 7."""
    a = get_matrix(a)
    return np.mean(a[12:18,:8])

def right_low_triangle_part_feature(a):
    """Calculates mean of horizontal axis pixels.
    More horizontal-oriented digits will have higher value. Good for 1, 7."""
    a = get_matrix(a)
    return np.mean(a[18:25, 22:])

def left_low_triangle_part_feature(a):
    """Calculates mean of horizontal axis pixels.
    More horizontal-oriented digits will have higher value. Good for 1, 7."""
    a = get_matrix(a)
    return np.mean(a[18:, :10])

def left_upper_triangle_part_feature(a):
    """Calculates mean of horizontal axis pixels.
    More horizontal-oriented digits will have higher value. Good for 1, 7."""
    a = get_matrix(a)
    return np.mean(a[:10, :10])

FEATURES = {
    (0, 1) : (vertical_axis_feature, center_feature),
    (0, 2) : (horizontal_symmetry_feature, center_feature),
    (0, 3) : (horizontal_symmetry_feature, center_feature),
    (0, 4) : (horizontal_symmetry_feature, center_feature),
    (0, 5) : (horizontal_symmetry_feature, center_feature),
    (0, 6) : (horizontal_symmetry_feature, center_feature),
    (0, 7) : (horizontal_symmetry_feature, center_feature),
    (0, 8) : (horizontal_symmetry_feature, center_feature),
    (0, 9) : (horizontal_symmetry_feature, center_feature),
    (1, 2) : (vertical_axis_feature, lower_part_feature),
    (1, 3) : (vertical_axis_feature, right_part_feature),
    (1, 4) : (horizontal_axis_feature, left_center_feature),
    (1, 5) : (vertical_axis_feature, lower_part_feature),
    (1, 6) : (vertical_axis_feature, lower_part_feature),
    (1, 7) : (horizontal_symmetry_feature, very_upper_part_feature),
    (1, 8) : (vertical_axis_feature, vertical_symmetry_feature),
    (1, 9) : (vertical_axis_feature, upper_part_feature),
    (2, 3) : (left_half_horizontal_axis_feature, very_upper_part_feature),
    (2, 4) : (horizontal_axis_feature, very_lower_part_feature),
    (2, 5) : (right_low_triangle_part_feature, left_half_horizontal_axis_feature),
    (2, 6) : (right_low_triangle_part_feature, left_center_feature),
    (2, 7) : (vertical_axis_feature, very_lower_part_feature),
    (2, 8) : (vertical_symmetry_feature, very_lower_part_feature),
    (2, 9) : (horizontal_axis_feature, very_lower_part_feature),
    (3, 4) : (vertical_axis_feature, horizontal_symmetry_feature),
    (3, 5) : (vertical_axis_feature, horizontal_symmetry_feature),
    (3, 6) : (horizontal_symmetry_feature, left_low_triangle_part_feature),
    (3, 7) : (vertical_axis_feature, horizontal_symmetry_feature),
    (3, 8) : (vertical_axis_feature, vertical_symmetry_feature),
    (3, 9) : (horizontal_axis_feature, vertical_symmetry_feature),
    (4, 5) : (horizontal_axis_feature, vertical_symmetry_feature),
    (4, 6) : (horizontal_axis_feature, vertical_symmetry_feature),
    (4, 7) : (horizontal_axis_feature, vertical_symmetry_feature),
    (4, 8) : (horizontal_axis_feature, vertical_symmetry_feature),
    (4, 9) : (horizontal_axis_feature, vertical_symmetry_feature),
    (5, 6) : (very_upper_part_feature, vertical_symmetry_feature),
    (5, 7) : (very_upper_part_feature, vertical_symmetry_feature),
    (5, 8) : (very_upper_part_feature, vertical_symmetry_feature),
    (5, 9) : (very_upper_part_feature, vertical_symmetry_feature),
    (6, 7) : (vertical_axis_feature, left_center_feature),
    (6, 8) : (left_center_feature, vertical_symmetry_feature),
    (6, 9) : (lower_part_feature, upper_part_feature),
    (7, 8) : (vertical_axis_feature, horizontal_symmetry_feature),
    (7, 9) : (vertical_axis_feature, upper_part_feature),
    (8, 9) : (lower_part_feature, upper_part_feature),
}

